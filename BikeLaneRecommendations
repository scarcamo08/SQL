############### Practiced new SQL including Common Table Expressions and Window Functions, analyzing City Bike Lane data ##############################



CREATE TABLE BIT_DB.CityBikeLanes (
id integer primary key,
year_installed year not null,
year_updated year not null,
street varchar not null,
width_feet integer not null,
safetyrating integer not null,
protected varchar not null)

INSERT INTO BIT_DB.CityBikeLanes values(1,2012, 2020, "Chestnut",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(2,2016, 2020,"Walnut",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(3,2011, 2020, "Market", 3.5, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(4,2008, 2020,"Locust",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(5,2002, 2020,"South",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(6,2012, 2021, "18th",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(7,2016, 2021,"2nd",4,3.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(8,2011, 2021, "Lombard", 3.5, 2.2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(9,2008, 2021,"Pine",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(10,2002, 2021,"Tasker",4.5,4.8,"no");
INSERT INTO BIT_DB.CityBikeLanes values(11,2012, 2020, "Earp",4,4.1,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(12,2016, 2020,"Titan",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(13,2011, 2020, "Manning", 3.4, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(14,2008, 2020,"Fieldcrest",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(15,2002, 2020,"York",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(16,2012, 2021, "Race",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(17,2016, 2021,"Museum",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(18,2011, 2021, "Altin", 3.5, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(19,2008, 2021,"Fred",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(20,2002, 2021,"Morris",4.5,4.7,"no");
INSERT INTO BIT_DB.CityBikeLanes values(21,2012, 2020, "Jameson",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(22,2016, 2020,"MLK",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(23,2011, 2020, "Parker", 3.6, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(24,2008, 2020,"Thomas",4,4.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(25,2002, 2020,"Running",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(26,2012, 2021, "Waverly",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(27,2016, 2021,"Addison",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(28,2011, 2021, "Beaver", 3.5, 2.1, "no");
INSERT INTO BIT_DB.CityBikeLanes values(29,2008, 2021,"Kensington",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(30,2002, 2021,"Mouse",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(31,2012, 2020, "Chestnut",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(32,2016, 2020,"Walnut",4,3.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(33,2011, 2020, "Market", 3.8, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(34,2008, 2020,"Locust",4,4.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(35,2002, 2020,"South",4.5,4.7,"no");
INSERT INTO BIT_DB.CityBikeLanes values(36,2012, 2021, "18th",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(37,2016, 2021,"2nd",4,3.2,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(38,2011, 2021, "Lombard", 3.5, 2.5, "no");
INSERT INTO BIT_DB.CityBikeLanes values(39,2008, 2021,"Pine",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(40,2002, 2021,"Tasker",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(41,2012, 2020, "Earp",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(42,2016, 2020,"Titan",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(43,2011, 2020, "Manning", 3.4, 2.7, "no");
INSERT INTO BIT_DB.CityBikeLanes values(44,2008, 2020,"Fieldcrest",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(45,2002, 2020,"York",4.5,4.4,"no");
INSERT INTO BIT_DB.CityBikeLanes values(46,2012, 2021, "Race",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(47,2016, 2021,"Museum",4,3.4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(48,2011, 2021, "Altin", 3.7, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(49,2008, 2021,"Fred",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(50,2002, 2021,"Morris",4.5,4.4,"no");
INSERT INTO BIT_DB.CityBikeLanes values(51,2012, 2020, "Jameson",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(52,2016, 2020,"MLK",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(53,2011, 2020, "Parker", 3.6, 2.3, "no");
INSERT INTO BIT_DB.CityBikeLanes values(54,2008, 2020,"Thomas",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(55,2002, 2020,"Running",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(56,2012, 2021, "Waverly",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(57,2016, 2021,"Addison",4,3.6,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(58,2011, 2021, "Beaver", 3.5, 2.5, "no");
INSERT INTO BIT_DB.CityBikeLanes values(59,2008, 2021,"Kensington",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(60,2002, 2021,"Mouse",4.5,4.3,"no");

select * from BIT_DB.CityBikeLanes;
select * from BIT_DB.CityBikeLanes where street = 'Walnut';

-- Let's say you work as a data analyst for your city, and your boss wants a list of all the bike lanes that have an average safety rating of 4.0 or higher. 
-- She also wants to see the average safety rating for each of those bike lanes. 
-- and a label that says "Safe Lane".

-- How can you provide these results using a CTE? Go ahead and try it on your own.

with safety_average_cte as
(select street, safetyrating 
from BIT_DB.CityBikeLanes
where safetyrating >= 4.0)

select avg(safety_average_cte) as Safe_Lane
from safety_average_cte
group by street;
-- XXXXXX yeah I can't do math on the CTE name and then pull from the table I guess

with safety_average_cte as
(select street, avg(safetyrating) as rating
from BIT_DB.CityBikeLanes
group by street);




---- Let's say you work as a data analyst for your city, and your boss wants a list of all the bike lanes that have an average safety rating of 4.0 or higher. 
-- She also wants to see the average safety rating for each of those bike lanes. 
-- and a label that says "Safe Lane".

--Course Walk Through
-- 1) 
with safety_average_cte as
(select street, avg(safetyrating) as 'rating'
from CityBikeLanes
group by street)

select street, rating, 'safe lane' as 'Label'
from safety_average_cte
where rating >= 4.0;
-- Okay, I'm not really sure why this one time I couldn't run it until I removed 'BIT_DB.' but then once i did, all was well and I got the same as the course answer
-- No repeat streets. ratings all abv 4.0 and all labeled as 'safe lane'

-- #########################################

WITH safety_average_cte AS (
SELECT street, AVG(safetyrating) as 'rating'
FROM citybikelanes
GROUP BY street)

SELECT 
street,
rating,
'safe lane' as 'label'
FROM safety_average_cte
WHERE rating >=4.0;
-- Course answer. 

-- ############## WINDOW FUNCTIONS #####################################################

SELECT street, safetyrating,
AVG(safetyrating) OVER (PARTITION BY street) as "Average_safety_rating"
FROM CityBikeLanes;
-- = "Take the average of SafetyRating OVER the entire result set, partitioned by street


SELECT street, safetyrating, AVG(safetyrating)
FROM CityBikeLanes
WHERE street='2nd'
GROUP BY street, safetyrating;
-- If we try to select safetyrating and AVG(safetyrating), all we get is safetyrating twice - no average
-- This is where window functions save the day. 
-- The two rows with the different safety ratings can retain their own identities, yet we can still add the average of the two rows as a result in a new column

SELECT street, safetyrating,
AVG(safetyrating) OVER (PARTITION BY street) as "Average_safety_rating"
FROM CityBikeLanes
WHERE street='2nd';
-- The two rows with the different safety ratings can retain their own identities, yet we can still add the average of the two rows as a result in a new column

select street, safetyrating,
avg(safetyrating) over (partition by street)
as "Average_Safety_Rating",
case
when Average_Safety_Rating >= 4.0 then "Leave As-Is"
when Average_Safety_Rating >= 2.5 then "Improvements Needed"
else "Remove"
end as label
from CityBikeLanes;
-- "XXXXX no such column: Average_Safety_Rating"
-- Felt pretty good abt it though

SELECT street, safetyrating,
AVG(safetyrating) OVER (PARTITION BY street) as "Average_safety_rating",
CASE WHEN AVG(safetyrating) OVER (PARTITION BY street) >=4 THEN "Leave As-Is"
    WHEN AVG(safetyrating) OVER (PARTITION BY street) <2.5 THEN "Remove"
    ELSE "Improvements Needed"
    END AS "Recommendation"
FROM CityBikeLanes;
-- Course Answer.
-- I was really close. Will change out my new CN instead for the whole Window Function and instead of "label" I'll punch in "Recommendation"

select street, safetyrating,
avg(safetyrating) over (partition by street)
as "Average_Safety_Rating",
case
when avg(safetyrating) over (partition by street) >= 4.0 then "Leave As-Is"
when avg(safetyrating) over (partition by street) >= 2.5 then "Improvements Needed"
else "Remove"
end as "Recommendations"
from CityBikeLanes; 
-- My second try at it and how it would look when I punch it all in.
-- table looks good. All the streets, all their safety ratings. Avgs and Recommendations for all streets.

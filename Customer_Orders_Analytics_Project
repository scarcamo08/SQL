# In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data.
# Included were Customers, January Sales, February Sales tables as well as Column info about OrderIDs, AccountNumbers,
        Product, Quantity, price, orderdate, and location
# First project where we began working and cleaning "messy" data
      Primary filters for cleaning were "where length(orderID) = 6, and orderID <> 'Order ID';"

-- 1) Wanted a count of column and filtered out messy orderID data: # of orders in Jan 9681
select count(orderID) from BIT_DB.JanSales
where length(orderID) = 6
and orderID <> 'Order ID';

select * from BIT_DB.JanSales limit 5;

select Product from BIT_DB.JanSales
where Product = 'iPhone';


--2) How many of those orders were for iphone
select count(Product) from BIT_DB.JanSales
where Product = 'iPhone'
and length(orderID) = 6;
-- my query = 379 orders for iphone

SELECT COUNT(orderid)
FROM BIT_DB.JanSales
WHERE Product='iPhone'
AND length(orderid) = 6
AND orderid <> 'Order ID';
-- Course query = 379 orders for iphone

-- 3) Select the customer account numbers for all the orders that were placed in February
select * from BIT_DB.customers;
select * from BIT_DB.FebSales;
--had to view messy data. will join on orderIDs. length=6

select acctnum from BIT_DB.customers customers
join BIT_DB.FebSales feb on customers.order_id = feb.orderID;
-- count = 1000 acct #s

select acctnum from BIT_DB.customers customers
join BIT_DB.FebSales feb on customers.order_id = feb.orderID
where length(feb.orderID) = 6;
-- My query also count = 1000 acct #s


SELECT distinct acctnum
FROM BIT_DB.customers cust
INNER JOIN BIT_DB.FebSales Feb
ON cust.order_id=FEB.orderid
WHERE length(orderid) = 6
AND orderid <> 'Order ID';
-- Course query and also count = 1000

select distinct acctnum from BIT_DB.customers customers
join BIT_DB.FebSales feb on customers.order_id = feb.orderID
where length(feb.orderID) = 6;



-- 4) Which product was the cheapest one sold in January, and what was the price?
select * from BIT_DB.JanSales;
--get a view of our data

select min(price) from BIT_DB.JanSales;
-- 2.99 but we don't know what the product was

select distinct Product from BIT_DB.JanSales
where price = 2.99;
-- AAA Batteries (4Pack). My answer but elected to run multiple queries 

SELECT distinct Product, price
FROM BIT_DB.JanSales
WHERE price in (SELECT min(price) FROM BIT_DB.JanSales);
-- Course query. also AAA Batteries, 2.99. Chose a subquery to always have an outside query that would be up to date. more efficient.



-- 5) What is the total revenue for each product sold in January?
-- (Revenue can be calculated using the number of products sold and the price of the products).
select count(distinct(Product)) from BIT_DB.JanSales;
-- 21 distinct products sold in January

select distinct product, round(sum(price)) from BIT_DB.JanSales
group by product;
-- thought abt it wrong. revenue is a product of qty and price

select product, sum(Quantity)*price as Revenue
from BIT_DB.JanSales
group by product;
-- Course answer, same results


--6) Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
select Product, sum(Quantity), sum(Quantity)*price as Revenue
from BIT_DB.FebSales
where location = '548 Lincoln St, Seattle, WA 98101';
-- My answer. Product = Batteries, 2 sold, Revenue 7.68

SELECT
sum(Quantity),
product,
sum(quantity)*price as revenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY product;
-- Course answer, same results.


--7) How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?
select count(acctnum) from BIT_DB.customers customers
join BIT_DB.FebSales feb
on customers.order_id=feb.orderID;

select acctnum from BIT_DB.customers;
-- 1000
select count(acctnum) from BIT_DB.customers;
-- 21,759
select count(distinct acctnum) from BIT_DB.customers;
-- 21,759
select * from BIT_DB.customers;
-- 1000 rows

select * from BIT_DB.FebSales
where Quantity > 2
and length(orderID) = 6;

select acctnum, price
from BIT_DB.customers customers
join BIT_DB.FebSales feb
on customers.order_id = feb.orderID
where Quantity > 2
and length(orderID) = 6;
--best shot rn

SELECT
count(distinct cust.acctnum),
avg(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE Feb.Quantity>2
AND length(orderid) = 6
AND orderid <> 'Order ID';
-- Course Answer. Wanted 1 total number of customers and 1 total avg spent

select count(distinct acctnum), avg(Quantity*price) as AVG_Spent
from BIT_DB.customers customers
join BIT_DB.FebSales feb
on customers.order_id = feb.orderID
where Quantity > 2
and length(orderID) = 6
and orderID <> 'Order ID';
--Reworked how I would have coded the answer.


#######################################################################################################################



#4.4 Advanced Data Filtering (Where...Between...And...;)
                             (where... = ' ';)
                             (where...Like '% %';) 
--Likely to DO/SEE in a corporate setting = Filtering data by Date

select orderdate from BIT_DB.FebSales
where orderdate between '02/13/19 00:00'
and '02/18/19 00:00';
-- Seeing the moment that either orders placed or orders processed.
-- orderdates are not chronological. not ideal.

select location
from BIT_DB.FebSales
where orderdate = '02/18/19 01:35';
-- one result for a location that placed order at 1:35

select sum(Quantity)
from BIT_DB.FebSales
where orderdate like '02/18/19%';
-- one result for qty of items ordered at any point on 2/18 = 508

select distinct Product
from BIT_DB.FebSales
where Product like '%Batteries%';
-- 2 results for AA and AAA batteries

select distinct Product, Price
from BIT_DB.FebSales
where Price like '%.99';
-- 8 results for distinct products with any price ending in .99

-- List all the products sold in Los Angeles in February, and include how many of each were sold.
select Product, sum(Quantity)
from BIT_DB.FebSales
where location like '%Los Angeles%'
group by Product;
-- 19 distinct and grouped results for products and their qty sold in %LA%

SELECT Product, SUM(quantity)
FROM BIT_DB.FebSales
WHERE location like '%Los Angeles%'
GROUP BY Product;
-- Course answer. same results.


#############################################################################################


--1 Which locations in New York received at least 3 orders in January, and how many orders did they each receive? (Hint: use HAVING).
select location, count(orderID)
from BIT_DB.JanSales
where length(orderID) = 6
and location like '%New York%'
group by location
having count(orderID) >= 3;
-- My result with 4 locations in NY, in January, placing at least 3 orders

SELECT distinct location, count(orderID)
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
AND length(orderid) = 6 
AND orderid <> 'Order ID'
GROUP BY location
HAVING count(orderID)>2;
--Course answer. Same results!



--2 How many of each type of headphone were sold in February?
select Product, count(Quantity) from BIT_DB.FebSales
where length(orderID) = 6
and orderID <> 'Order ID'
group by Product
having Product like '%Headphones%';
-- first run at it. should have used sum instead of quantity.

SELECT sum(Quantity) as quantity,
Product
FROM BIT_DB.FebSales 
WHERE Product like '%Headphones%'
GROUP BY Product;
-- Course answer. total quantities for ea of the 3 results we larger than my results. she used sum and I incorrectly used count. otherwise, we did return essentially the same results.

select Product, sum(Quantity)
from BIT_DB.FebSales
where length(orderID) = 6
and orderID <> 'Order ID'
group by Product
having Product like '%Headphones%';
-- Reworked my query the way i had it to verify that changing from count to sum would lead to same as course results. it did.



--3 What was the average amount spent per account in February? (Hints: For this question, we want the average amount spent / number of accounts, not the amount spent by each account. To multiply, you can use the * symbol, and to divide, you can use the / symbol.)
select Round((sum(Quantity*price))/count(acctnum)) as AVG_Spent
from BIT_DB.customers customers
join BIT_DB.FebSales feb
on customers.order_id = feb.orderID
where length(orderID) = 6
and orderID <> 'Order ID';
-- best shot. AVG Spent = 190

SELECT sum(quantity*price)/count(cust.acctnum)
FROM BIT_DB.FebSales Feb

LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id

WHERE length(orderid) = 6 
AND orderid <> 'Order ID';
-- Course answer. yes same results except for I chose to Round my answer: AVG Spent 190

SELECT avg(quantity*price)
FROM BIT_DB.FebSales Feb

LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id

WHERE length(orderid) = 6 
AND orderid <> 'Order ID';
-- OR course showed you could also just use avg function. also 190



--4 What was the average quantity of products purchased per account in February? (Hint: just like question 3, we want the overall average, not the average for each account individually).
select sum(Quantity)/count(acctnum) as AVG_Qty
from BIT_DB.FebSales feb
join BIT_DB.customers customers
on feb.orderID = customers.order_id
where length(orderID) = 6
and orderID <> 'Order ID';
-- First run at it. Avg Qty = 1.118. then ran the course answer(1) and then altered my sum/count and then also got 1

select sum(quantity)/count(cust.acctnum)
FROM BIT_DB.FebSales Feb

LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id

WHERE length(orderid) = 6 
AND orderid <> 'Order ID';
-- Course answer Avg qty = 1



--5 Which product brought in the most revenue in January and how much revenue did it bring in total?
select distinct Product, sum(Quantity*price) as Revenue
from BIT_DB.JanSales
where length(orderID) = 6
and orderID <> 'Order ID';
-- My 1st answer. iphone 1,815,335. checked answer. not a match. Macbook Pro Laptop 399,500

select Product, sum(Quantity*price) as Revenue
from BIT_DB.JanSales
where length(orderID) = 6
and orderID <> 'Order ID'
group by Product
order by Revenue desc
limit 1;
-- Read the course answer and reworked mine how I would query to get Macbook answer

SELECT product, 
sum(quantity*price)
FROM BIT_DB.JanSales 
GROUP BY product
ORDER BY sum(quantity*price) desc 
LIMIT 1;
-- Course answer. Iphone 399,500
--# EXPLANATION #1 
--# "Why do we use SUM(quantity*price) instead of SUM(quantity)*price?"
--# In this question, we are using GROUP BY product. 
--# The price of each individual product doesn't change. 
--# That's why SUM(quantity*price) and SUM(quantity)*price, in this specific question, both give the same results. 


select sum(quantity),
price,
sum(quantity)*price as revenue,
sum(quantity*price) as revenue2,
product 
FROM BIT_DB.JanSales
group by product;
--# EXPLANATION #2
--# "Why can't I just use sum(price) instead of sum(quantity*price)?"
--# In this case, there's no difference between sum(price) and sum(quantity*price).
--# However, the correct answer is sum(quantity*price), because revenue is calculated by multiplying the price of the product by the number sold. 
--# In this data, each product is sold for only one price, so you can get the same answer with sum(price). 
--# But not every dataset will be that simple, and it's best not to assume that's the case.
--# If the product was sold for different prices on different days, sum(price) wouldn't give the correct answer.






